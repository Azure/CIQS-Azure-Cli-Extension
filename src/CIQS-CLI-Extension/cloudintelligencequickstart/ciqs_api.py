# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models


class CiqsApiConfiguration(Configuration):
    """Configuration for CiqsApi
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        if not base_url:
            base_url = 'https://ciqs-api.azure.ai'

        super(CiqsApiConfiguration, self).__init__(base_url)

        self.add_user_agent('ciqsapi/{}'.format(VERSION))


class CiqsApi(object):
    """Deployment service backend for solutions on quickstart.azure.ai

    :ivar config: Configuration for client.
    :vartype config: CiqsApiConfiguration

    :param str base_url: Service URL
    """

    def __init__(
            self, creds=None, base_url=None):

        self.config = CiqsApiConfiguration(base_url)
        self._client = ServiceClient(creds, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'Build_air_cloudai_machinelearning_cloudintelligencequickstart'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def get_api_gallery(
            self, solution_storage_connection_string=None, category=None, partnername=None, owneremail=None, custom_headers=None, raw=False, **operation_config):
        """Get Gallery for current user.

        :param solution_storage_connection_string: A connection string for a
         private storage account.
        :type solution_storage_connection_string: str
        :param category: Category.
        :type category: str
        :param partnername: Partner Name.
        :type partnername: str
        :param owneremail: Owner Email.
        :type owneremail: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype:
         list[~microsoft.swagger.codegen.cloudintelligencequickstart.models.MicrosoftCiqsModelsGalleryTemplate]
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_api_gallery.metadata['url']

        # Construct parameters
        query_parameters = {}
        if category is not None:
            query_parameters['category'] = self._serialize.query("category", category, 'str')
        if partnername is not None:
            query_parameters['partnername'] = self._serialize.query("partnername", partnername, 'str')
        if owneremail is not None:
            query_parameters['owneremail'] = self._serialize.query("owneremail", owneremail, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if solution_storage_connection_string is not None:
            header_parameters['SolutionStorageConnectionString'] = self._serialize.header("solution_storage_connection_string", solution_storage_connection_string, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[MicrosoftCiqsModelsGalleryTemplate]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_api_gallery.metadata = {'url': '/api/gallery'}

    def get_api_gallery_by_template_id(
            self, template_id, solution_storage_connection_string=None, custom_headers=None, raw=False, **operation_config):
        """Gets detailed information about a solution template. This includes:
        - Solution metadata such as splash image, decsription, and owners.
        - List of provisioning steps and deployments.

        :param template_id: Id of the solution template.
        :type template_id: str
        :param solution_storage_connection_string: A connection string for a
         private storage account.
        :type solution_storage_connection_string: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftCiqsModelsGalleryTemplate or ClientRawResponse if
         raw=true
        :rtype:
         ~microsoft.swagger.codegen.cloudintelligencequickstart.models.MicrosoftCiqsModelsGalleryTemplate
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_api_gallery_by_template_id.metadata['url']
        path_format_arguments = {
            'templateId': self._serialize.url("template_id", template_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if solution_storage_connection_string is not None:
            header_parameters['SolutionStorageConnectionString'] = self._serialize.header("solution_storage_connection_string", solution_storage_connection_string, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MicrosoftCiqsModelsGalleryTemplate', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_api_gallery_by_template_id.metadata = {'url': '/api/gallery/{templateId}'}

    def get_api_deployments_by_subscription_id(
            self, subscription_id, custom_headers=None, raw=False, **operation_config):
        """Get a list of T:Microsoft.Ciqs.Models.Deployment.Deployment object
        representing deployments a user made within the provided subscription
        Id.

        :param subscription_id: Id of the subscription within which to query
         for existing deployments.
        :type subscription_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype:
         list[~microsoft.swagger.codegen.cloudintelligencequickstart.models.MicrosoftCiqsModelsDeploymentDeployment]
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_api_deployments_by_subscription_id.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[MicrosoftCiqsModelsDeploymentDeployment]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_api_deployments_by_subscription_id.metadata = {'url': '/api/deployments/{subscriptionId}'}

    def post_api_deployments_by_subscription_id_by_template_id(
            self, subscription_id, template_id, body, ms_asm_refresh_token=None, custom_headers=None, raw=False, **operation_config):
        """Creates a new deployment of the requested solution template within the
        user's requested subscription and location.
        As part of creating a new deployment, this creates a resource group
        within the selected subscription of the same name as the deployment.
        The deployment is provisioned asynchronously so this API call will
        return before any
        T:Microsoft.Ciqs.Models.Deployment.DeploymentProvisioningStep has begun
        executing.
        Therefore, the list of provisioning steps, and provsioning logs will
        remain null until provisioning has begun.

        :param subscription_id: Id of the subscription within which to query
         for existing deployments.
        :type subscription_id: str
        :param template_id: Template Id.
        :type template_id: str
        :param body:
        :type body:
         ~microsoft.swagger.codegen.cloudintelligencequickstart.models.MicrosoftCiqsModelsDeploymentCreateDeploymentRequest
        :param ms_asm_refresh_token: The refresh token signed for a user in an
         Azure tenant.
        :type ms_asm_refresh_token: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftCiqsModelsDeploymentDeployment or ClientRawResponse
         if raw=true
        :rtype:
         ~microsoft.swagger.codegen.cloudintelligencequickstart.models.MicrosoftCiqsModelsDeploymentDeployment
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.post_api_deployments_by_subscription_id_by_template_id.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'templateId': self._serialize.url("template_id", template_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_asm_refresh_token is not None:
            header_parameters['MS-AsmRefreshToken'] = self._serialize.header("ms_asm_refresh_token", ms_asm_refresh_token, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'MicrosoftCiqsModelsDeploymentCreateDeploymentRequest')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MicrosoftCiqsModelsDeploymentDeployment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_api_deployments_by_subscription_id_by_template_id.metadata = {'url': '/api/deployments/{subscriptionId}/{templateId}'}

    def get_api_deployments_by_subscription_id_by_deployment_id(
            self, subscription_id, deployment_id, custom_headers=None, raw=False, **operation_config):
        """Get detailed information of a
        T:Microsoft.Ciqs.Models.Deployment.Deployment represented by the
        T:Microsoft.Ciqs.Models.Deployment.DeploymentDetails object.
        This details object contains information for each
        T:Microsoft.Ciqs.Models.Deployment.DeploymentProvisioningStep within
        the deployment.

        :param subscription_id: Id of the subscription within which to query
         for existing deployments.
        :type subscription_id: str
        :param deployment_id: A unique Id assigned to a deployment when it was
         created.
        :type deployment_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftCiqsModelsDeploymentDeploymentDetails or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.swagger.codegen.cloudintelligencequickstart.models.MicrosoftCiqsModelsDeploymentDeploymentDetails
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_api_deployments_by_subscription_id_by_deployment_id.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'deploymentId': self._serialize.url("deployment_id", deployment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MicrosoftCiqsModelsDeploymentDeploymentDetails', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_api_deployments_by_subscription_id_by_deployment_id.metadata = {'url': '/api/deployments/{subscriptionId}/{deploymentId}'}

    def put_api_deployments_by_subscription_id_by_deployment_id(
            self, subscription_id, deployment_id, body, ms_asm_refresh_token=None, custom_headers=None, raw=False, **operation_config):
        """Resumes an already provisioning deployment. This can also be used to
        retry an existing step if it has failed.
        If the parameters provided are invalid, then the response status code
        will be 400
        and the response will contain and error code from
        T:Microsoft.Ciqs.Models.ErrorCodes.
        If the provisioning step fails asynchronously due to a dependency after
        the provisioning had resumed,
        the details of the error will be available via the deployment details
        API.

        :param subscription_id: Id of the subscription within which to query
         for existing deployments.
        :type subscription_id: str
        :param deployment_id: A unique Id assigned to a deployment when it was
         created.
        :type deployment_id: str
        :param body:
        :type body: dict[str, str]
        :param ms_asm_refresh_token: The refresh token signed for a user in an
         Azure tenant.
        :type ms_asm_refresh_token: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftCiqsApiModelsExecuteProvisioningStepResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.swagger.codegen.cloudintelligencequickstart.models.MicrosoftCiqsApiModelsExecuteProvisioningStepResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.put_api_deployments_by_subscription_id_by_deployment_id.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'deploymentId': self._serialize.url("deployment_id", deployment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_asm_refresh_token is not None:
            header_parameters['MS-AsmRefreshToken'] = self._serialize.header("ms_asm_refresh_token", ms_asm_refresh_token, 'str')

        # Construct body
        body_content = self._serialize.body(body, '{str}')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MicrosoftCiqsApiModelsExecuteProvisioningStepResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    put_api_deployments_by_subscription_id_by_deployment_id.metadata = {'url': '/api/deployments/{subscriptionId}/{deploymentId}'}

    def delete_api_deployments_by_subscription_id_by_deployment_id(
            self, subscription_id, deployment_id, custom_headers=None, raw=False, **operation_config):
        """Initiates the deletion of a deployment. This essentially removes the
        resource group that was created when the deployment was done.
        Note: Any changes made to the resources post deployment will also be
        lost because all resources within the provisioning resource group will
        be deleted.
        If the deletion fails, the deplyoment details response will contain the
        details.

        :param subscription_id: Id of the subscription within which the
         deployment was done.
        :type subscription_id: str
        :param deployment_id: A unique Id assigned to a deployment when it was
         created.
        :type deployment_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftCiqsApiModelsDeleteDeploymentResult or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.swagger.codegen.cloudintelligencequickstart.models.MicrosoftCiqsApiModelsDeleteDeploymentResult
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_api_deployments_by_subscription_id_by_deployment_id.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'deploymentId': self._serialize.url("deployment_id", deployment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MicrosoftCiqsApiModelsDeleteDeploymentResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    delete_api_deployments_by_subscription_id_by_deployment_id.metadata = {'url': '/api/deployments/{subscriptionId}/{deploymentId}'}

    def get_api_locations_by_subscription_id_by_template_id(
            self, template_id, subscription_id, solution_storage_connection_string=None, custom_headers=None, raw=False, **operation_config):
        """Returns valid locations for a specific subscription and a template.
        It does so by validating availability of resources required by a
        solution template's ARM deployments
        and user's quota and picking the lowest common denominators.

        :param template_id: Id of the solution template for which the
         locations should be fetched.
        :type template_id: str
        :param subscription_id: The subscription the user intends to deploy
         the template into.
        :type subscription_id: str
        :param solution_storage_connection_string: A connection string for a
         private storage account.
        :type solution_storage_connection_string: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_api_locations_by_subscription_id_by_template_id.metadata['url']
        path_format_arguments = {
            'templateId': self._serialize.url("template_id", template_id, 'str'),
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if solution_storage_connection_string is not None:
            header_parameters['SolutionStorageConnectionString'] = self._serialize.header("solution_storage_connection_string", solution_storage_connection_string, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_api_locations_by_subscription_id_by_template_id.metadata = {'url': '/api/locations/{subscriptionId}/{templateId}'}
